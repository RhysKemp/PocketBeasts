<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="0ded23d7-65aa-4ee7-937b-2cfdc868a85a" name="Changes" comment="Fix various tests" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
        <option value="Interface" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <favorite-branches>
      <branch-storage>
        <map>
          <entry type="LOCAL">
            <value>
              <list>
                <branch-info repo="$PROJECT_DIR$" source="dev" />
              </list>
            </value>
          </entry>
          <entry type="REMOTE">
            <value>
              <list>
                <branch-info repo="$PROJECT_DIR$" source="origin/Phase-1" />
                <branch-info repo="$PROJECT_DIR$" source="origin/phase-two" />
                <branch-info repo="$PROJECT_DIR$" source="origin/phase-one" />
                <branch-info repo="$PROJECT_DIR$" source="origin/original" />
              </list>
            </value>
          </entry>
        </map>
      </branch-storage>
    </favorite-branches>
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="dev" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GithubDefaultAccount">
    <option name="defaultAccountId" value="3c46b835-cb58-4d8c-b5f5-d831f578ea38" />
  </component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 3
}</component>
  <component name="ProjectId" id="2fxkloTavSn4kzEKbL7G3FwfHvc" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Application.Unnamed.executor": "Run",
    "Application.application.executor": "Run",
    "JUnit.All in PocketBeasts.executor": "Run",
    "JUnit.CardTest.executor": "Run",
    "JUnit.ConsoleInputManagerTest.attackWhichPlayerPrompt_ReturnsCorrectResponse.executor": "Run",
    "JUnit.ConsoleInputManagerTest.executor": "Run",
    "JUnit.ConsoleOutputManagerTest.executor": "Run",
    "JUnit.DeckTest.draw_RemovesCardFromDeck.executor": "Run",
    "JUnit.DeckTest.draw_ThrowsExceptionWhenDeckIsEmpty.executor": "Run",
    "JUnit.DeckTest.executor": "Run",
    "JUnit.GameManagerTest.executor": "Run",
    "JUnit.GameManagerTest.start_WithDeadPlayer_RemovesPlayerAndStopsGame.executor": "Run",
    "JUnit.GameManagerTest.start_WithMultiplePlayers_PlayersTakeTurnsInCorrectOrder.executor": "Run",
    "JUnit.GameManagerTest.start_WithMultipleRounds_AttackPlayerDirectly.executor": "Run",
    "JUnit.GameManagerTest.start_WithMultipleRounds_GameIsRunning.executor": "Run",
    "JUnit.GameManagerTest.start_WithNoPlayers_ThrowsException.executor": "Run",
    "JUnit.GameManagerTest.start_WithOnePlayer_StopsGameAndDeclaresWinner.executor": "Run",
    "JUnit.GameManagerTest.start_WithTwoPlayers_ChecksFatigueDeath.executor": "Run",
    "JUnit.GameManagerTest.start_WithTwoPlayers_ChecksInteractions.executor": "Run",
    "JUnit.GameTest.applyCardDecorations_GlobalHealthBuffCardDecoratorWorks.executor": "Run",
    "JUnit.GameTest.executor": "Run",
    "JUnit.GameTest.newGame_DealsInitialHandToPlayers.executor": "Run",
    "JUnit.GameTest.testDecorators.executor": "Run",
    "JUnit.GameTest.testGlobalAttackBuffCardDecorator.executor": "Run",
    "JUnit.HandTest.executor": "Run",
    "JUnit.InPlayTest.executor": "Run",
    "JUnit.PlayerManagerTest.executor": "Run",
    "JUnit.PlayerTest.executor": "Run",
    "JUnit.PlayerTest.toString_ReturnsCorrectFormat.executor": "Run",
    "JUnit.cis2039.pocketbeasts in PocketBeasts.executor": "Run",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "git-widget-placeholder": "master",
    "ignore.virus.scanning.warn.message": "true",
    "kotlin-language-version-configured": "true",
    "last_opened_file_path": "C:/Users/Rhys/OneDrive/Documents/University/Software and Design Principles/P1-C2471361",
    "project.structure.last.edited": "Project",
    "project.structure.proportion": "0.15",
    "project.structure.side.proportion": "0.0",
    "run.code.analysis.last.selected.profile": "pProject Default",
    "settings.editor.selected.configurable": "reference.settings.project.maven.repository.indices"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="cis2039.pocketbeasts.gameengine" />
    </key>
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="cis2039.pocketbeasts.gameengine" />
      <recent name="cis2039.pocketbeasts.ui" />
      <recent name="cis2039.pocketbeasts" />
      <recent name="cis2039.pocketbeasts.models" />
      <recent name="cis2039.pocketbeasts.utils" />
    </key>
  </component>
  <component name="RunManager" selected="JUnit.ConsoleOutputManagerTest">
    <configuration name="application" type="Application" factoryName="Application">
      <option name="ALTERNATIVE_JRE_PATH" value="$PROJECT_DIR$/../../../../../../../Program Files/Java/jdk-21" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
      <option name="MAIN_CLASS_NAME" value="cis2039.pocketbeasts.Main" />
      <module name="PocketBeasts" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ConsoleInputManagerTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="PocketBeasts" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="cis2039.pocketbeasts.ui.textbased.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="cis2039.pocketbeasts.ui.textbased" />
      <option name="MAIN_CLASS_NAME" value="cis2039.pocketbeasts.ui.textbased.ConsoleInputManagerTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ConsoleInputManagerTest.attackWhichPlayerPrompt_ReturnsCorrectResponse" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="PocketBeasts" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="cis2039.pocketbeasts.ui.textbased.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="cis2039.pocketbeasts.ui.textbased" />
      <option name="MAIN_CLASS_NAME" value="cis2039.pocketbeasts.ui.textbased.ConsoleInputManagerTest" />
      <option name="METHOD_NAME" value="attackWhichPlayerPrompt_ReturnsCorrectResponse" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ConsoleOutputManagerTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="PocketBeasts" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="cis2039.pocketbeasts.ui.textbased.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="cis2039.pocketbeasts.ui.textbased" />
      <option name="MAIN_CLASS_NAME" value="cis2039.pocketbeasts.ui.textbased.ConsoleOutputManagerTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="GameManagerTest.start_WithMultiplePlayers_PlayersTakeTurnsInCorrectOrder" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="PocketBeasts" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="cis2039.pocketbeasts.gameengine.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="cis2039.pocketbeasts.gameengine" />
      <option name="MAIN_CLASS_NAME" value="cis2039.pocketbeasts.gameengine.GameManagerTest" />
      <option name="METHOD_NAME" value="start_WithMultiplePlayers_PlayersTakeTurnsInCorrectOrder" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="GameManagerTest.start_WithMultipleRounds_AttackPlayerDirectly" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="PocketBeasts" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="cis2039.pocketbeasts.gameengine.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="cis2039.pocketbeasts.gameengine" />
      <option name="MAIN_CLASS_NAME" value="cis2039.pocketbeasts.gameengine.GameManagerTest" />
      <option name="METHOD_NAME" value="start_WithMultipleRounds_AttackPlayerDirectly" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="JUnit.GameManagerTest.start_WithMultipleRounds_AttackPlayerDirectly" />
        <item itemvalue="JUnit.GameManagerTest.start_WithMultiplePlayers_PlayersTakeTurnsInCorrectOrder" />
        <item itemvalue="JUnit.ConsoleOutputManagerTest" />
        <item itemvalue="JUnit.ConsoleInputManagerTest.attackWhichPlayerPrompt_ReturnsCorrectResponse" />
        <item itemvalue="JUnit.ConsoleInputManagerTest" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="0ded23d7-65aa-4ee7-937b-2cfdc868a85a" name="Changes" comment="" />
      <created>1714750270120</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1714750270120</updated>
    </task>
    <task id="LOCAL-00001" summary="Refactor AbstractCardGroup and child classes for DRY principle&#10;&#10;- Created AbstractCardGroup class to hold common functionality of card groups&#10;- Refactored Hand, InPlay, and Graveyard classes to extend AbstractCardGroup&#10;- Updated documentation to reflect changes and credit original authors">
      <option name="closed" value="true" />
      <created>1714758200596</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1714758200596</updated>
    </task>
    <task id="LOCAL-00002" summary="Refactor AbstractCardGroup and child classes for DRY principle&#10;&#10;- Created AbstractCardGroup class to hold common functionality of card groups&#10;- Refactored Hand, InPlay, and Graveyard classes to extend AbstractCardGroup&#10;- Updated documentation to reflect changes and credit original authors">
      <option name="closed" value="true" />
      <created>1714760688460</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1714760688460</updated>
    </task>
    <task id="LOCAL-00003" summary="Refactor Player, Game, Main, and Deck classes for multi-player support and individual decks&#10;&#10;- Player class: Added a Deck object to each Player instance. This allows each player to have their own deck of cards. Also added mana management to the Player class, giving each player their own mana pool.&#10;&#10;- Game class: Changed the Game class to hold a list of Player objects, allowing for multiple players in a game. Added methods to add and remove players from the game. Updated the newGame and drawCard methods to work with multiple players.&#10;&#10;- Main class: Refactored the main game loop to interact with the Game class instead of directly with the Player class for game-related actions. This makes the code easier to understand and maintain.&#10;&#10;- Deck class: No major changes, but it's now being used in the Player class to give each player their own deck.&#10;&#10;These changes improve the object-oriented design of the code by ensuring that each class has a single responsibility and that the state and behavior related to a single concept (e.g., a player or a game) are encapsulated in one place.&quot;">
      <option name="closed" value="true" />
      <created>1714767433870</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1714767433870</updated>
    </task>
    <task id="LOCAL-00004" summary="Implemented Attackable interface and refactored attackWithCard method for future expansion.&#10;&#10;- Introduced a new interface Attackable with a takeDamage(int damage) method.&#10;&#10;- Modified Player and Card classes to implement the Attackable interface.&#10;Refactored the attackWithCard method in the Game class to accept an Attackable target.&#10;&#10;- Updated the attackWithCard method to call the takeDamage method on the target.&#10;&#10;- This change allows for easy expansion in the future, as the target selected can be passed to the attackWithCard method.">
      <option name="closed" value="true" />
      <created>1714841127470</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1714841127470</updated>
    </task>
    <task id="LOCAL-00005" summary="Implement major refactor for better game flow and error handling&#10;&#10;This commit includes a significant overhaul of the game's structure and logic to improve the game flow, enhance error handling, and increase code readability:&#10;&#10;- Introduced a new `GameLoop` class to manage the main game loop. This class handles the game's flow, including player turns and game state updates. The `start` method was modified to prevent `ConcurrentModificationException` by separating the iteration over the cards from the modification of the cards.&#10;&#10;- Created a `PlayerInitializer` class to handle player initialization. This class is responsible for setting up the players at the start of the game, including assigning starter cards and initializing players&#10;&#10;- Created the `InputHandler` class to handle user inputs more robustly. This class now provides clearer prompts to the user and handles invalid inputs more gracefully.&#10;&#10;- Refactored the `Main` class to reflect the changes made in `GameLoop` and ensure consistent behaviour across the application. The main method now initializes the game and starts the game loop.&#10;&#10;- Enhanced the `Player` class to use `ArrayList` more effectively. The `set` method was replaced with `add` for adding new players, and unnecessary size specification was removed when creating the `ArrayList`.&#10;&#10;- Created the `CardLibrary` class to make the starter cards static and unmodifiable, ensuring they cannot be accidentally altered during gameplay. This class now serves as a central repository for all available cards in the game.&#10;&#10;These changes collectively improve the game's structure and flow, making the code easier to read and maintain, and the game more enjoyable to play.">
      <option name="closed" value="true" />
      <created>1714851725949</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1714851725949</updated>
    </task>
    <task id="LOCAL-00006" summary="Refactor GameLoop and InputHandler classes for better code readability and maintainability&#10;&#10;- More robust validation across GameLoop, InputHandler, Attackable implementations &amp; PlayerInitializer&#10;&#10;- More methods in InputHandler to decrease code duplication.&#10;&#10;- Implement ID system into Player&#10;&#10;- Refactor GameLoop.start(); Removed lots of unnecessary logic and modularised.">
      <option name="closed" value="true" />
      <created>1714859202170</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1714859202170</updated>
    </task>
    <task id="LOCAL-00007" summary="Implemented multi-player support and refactor GameLoop&#10;&#10;- Added fatigue Damage mechanic if deck is empty.&#10;&#10;- More than 2 player support added.&#10;&#10;- Various checks inside GameLoop.start() for dead players and win conditions.&#10;&#10;- Refactor GameLoop.start to stick to OOP and reduce complexity.">
      <option name="closed" value="true" />
      <created>1714863850814</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1714863850814</updated>
    </task>
    <task id="LOCAL-00008" summary="Implemented multi-player support and refactor GameLoop&#10;&#10;- Added fatigue Damage mechanic if deck is empty.&#10;&#10;- More than 2 player support added.&#10;&#10;- Various checks inside GameLoop.start() for dead players and win conditions.&#10;&#10;- Refactor GameLoop.start to stick to OOP and reduce complexity.">
      <option name="closed" value="true" />
      <created>1714865183856</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1714865183856</updated>
    </task>
    <task id="LOCAL-00009" summary="Implemented multi-player support and refactor GameLoop&#10;&#10;- Added fatigue Damage mechanic if deck is empty.&#10;&#10;- More than 2 player support added.&#10;&#10;- Various checks inside GameLoop.start() for dead players and win conditions.&#10;&#10;- Refactor GameLoop.start to stick to OOP and reduce complexity.">
      <option name="closed" value="true" />
      <created>1714865213273</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1714865213273</updated>
    </task>
    <task id="LOCAL-00010" summary="Implemented multi-player support and refactor GameLoop&#10;&#10;- Added fatigue Damage mechanic if deck is empty.&#10;&#10;- More than 2 player support added.&#10;&#10;- Various checks inside GameLoop.start() for dead players and win conditions.&#10;&#10;- Refactor GameLoop.start to stick to OOP and reduce complexity.">
      <option name="closed" value="true" />
      <created>1714865317073</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1714865317073</updated>
    </task>
    <task id="LOCAL-00011" summary="Refactor GameManager class, improve error handling, remove code duplication, and add some basic JUnitTests&#10;&#10;- Created ConsoleOutputManager - responsible for printing to the console specific messages.">
      <option name="closed" value="true" />
      <created>1714871653225</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1714871653225</updated>
    </task>
    <task id="LOCAL-00012" summary="Refactor GameManager to adhere to OOP via abstraction of OutputManager &amp; InputManager&#10;&#10;- Created Interefaces, OutputManager &amp; InputManager&#10;&#10;- Added an overloaded constructor to the GameManager class that defaults to text-based input and output.">
      <option name="closed" value="true" />
      <created>1714913713904</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1714913713904</updated>
    </task>
    <task id="LOCAL-00013" summary="Refactor GameManager to adhere to OOP via abstraction of OutputManager &amp; InputManager&#10;&#10;- Created Interefaces, OutputManager &amp; InputManager&#10;&#10;- Added an overloaded constructor to the GameManager class that defaults to text-based input and output.">
      <option name="closed" value="true" />
      <created>1714913732158</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1714913732158</updated>
    </task>
    <task id="LOCAL-00014" summary="Add comprehensive test cases for all classes &amp; minor functionality tweaks to gameplay.&#10;&#10;This commit introduces a suite of test cases that cover all classes in the project. The tests aim to ensure the correct functionality of each class and method, and to prevent regressions in future updates.">
      <option name="closed" value="true" />
      <created>1714946388957</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1714946388957</updated>
    </task>
    <task id="LOCAL-00015" summary="Target">
      <option name="closed" value="true" />
      <created>1714958838976</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1714958838976</updated>
    </task>
    <task id="LOCAL-00016" summary="Started implementation of Decorator Pattern for Card Enhancements&#10;&#10;This commit introduces the decorator pattern to enhance the functionality of the Card objects in the game. The changes include:&#10;&#10;- Created `ICard` interface: This interface defines the methods that all Card objects should implement.&#10;&#10;- Implemented `CardDecorator` abstract class: This class implements the `ICard` interface and serves as a base for all card decorators. It contains a reference to a decorated `ICard` object and delegates all `ICard` methods to this object.&#10;&#10;- Implemented `AttackCardDecorator` class: This class extends `CardDecorator` and overrides the `getAttack()` method to add additional attack power to the decorated card.&#10;&#10;- Implemented `DefenseCardDecorator` class: This class extends `CardDecorator` and overrides the `getHealth()` method to add additional health to the decorated card.&#10;&#10;These changes will allow us to add new behavior to `Card` objects without modifying their existing code, adhering to the open-closed principle of software design.">
      <option name="closed" value="true" />
      <created>1714961057337</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1714961057337</updated>
    </task>
    <task id="LOCAL-00017" summary="Continued implementation of decorator pattern.&#10;&#10;- Refactored code to take ICard instead of Card">
      <option name="closed" value="true" />
      <created>1715015667360</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1715015667360</updated>
    </task>
    <task id="LOCAL-00018" summary="Finished implementation of Decorator design pattern&#10;&#10;- Unit tests for application of decorators&#10;&#10;- Function for applying future decorations&#10;&#10;- Added GlobalAttackBuffCardDecorator &amp; GlobalHealthBuffCardDecorator. Implemented their functionality.">
      <option name="closed" value="true" />
      <created>1715021896272</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1715021896272</updated>
    </task>
    <task id="LOCAL-00019" summary="Apply Factory Design Pattern to Player, Card and Deck Creation&#10;&#10;Body:&#10;This commit applies the Factory Design Pattern to the creation of Player, Card and Deck objects in the game. &#10;&#10;- Created PlayerFactory, CardFactory and DeckFactory classes to encapsulate the creation logic of Player, Card and Deck objects respectively.&#10;&#10;- Refactored PlayerManager class to use PlayerFactory for player creation.&#10;&#10;- Refactored Player class to use DeckFactory for deck creation.&#10;&#10;- Refactored CardLibrary class to use CardFactory for card creation&#10;&#10;These changes make the code more flexible and easier to maintain, as adding new types of players, cards or decks in the future will only require modifications in the respective factory classes.&#10;&#10;If the game were to support different types of game modes or levels, a Factory could be used to create these as well.">
      <option name="closed" value="true" />
      <created>1715024876439</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1715024876439</updated>
    </task>
    <task id="LOCAL-00020" summary="Implement Observer Pattern for Game Event Notifications&#10;&#10;&#10;This commit introduces the Observer design pattern to handle game event notifications in the PocketBeasts game. The changes include:&#10;&#10;- Creation of a `GameEventNotifier` class that acts as the subject in the Observer pattern. This class maintains a list of observers and provides methods to register, remove, and notify observers.&#10;&#10;- Modification of the `Game` class to implement the `Subject` interface. The `Game` class uses an instance of `GameEventNotifier` to manage its observers and notify them of game events.&#10;&#10;- Addition of observer registration and removal in the `GameManager` class. The `OutputManager` is registered as an observer when the game starts and is removed when the game stops.&#10;&#10;- Update of the `ConsoleOutputManager` class to implement the `Observer` interface. This class now responds to game events by updating the console output accordingly.&#10;&#10;These changes improve the modularity and flexibility of the game engine, making it easier to add, remove, or modify game events and their corresponding responses in the future.">
      <option name="closed" value="true" />
      <created>1715036318684</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1715036318684</updated>
    </task>
    <task id="LOCAL-00021" summary="Fix various tests">
      <option name="closed" value="true" />
      <created>1715038612369</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1715038612369</updated>
    </task>
    <option name="localTasksCounter" value="22" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <ignored-roots>
      <path value="$PROJECT_DIR$" />
    </ignored-roots>
    <MESSAGE value="Initial commit" />
    <MESSAGE value=".gitignore &amp;" />
    <MESSAGE value="Refactor AbstractCardGroup and child classes for DRY principle&#10;&#10;- Created AbstractCardGroup class to hold common functionality of card groups&#10;- Refactored Hand, InPlay, and Graveyard classes to extend AbstractCardGroup&#10;- Updated documentation to reflect changes and credit original authors" />
    <MESSAGE value="Refactor Player, Game, Main, and Deck classes for multi-player support and individual decks&#10;&#10;- Player class: Added a Deck object to each Player instance. This allows each player to have their own deck of cards. Also added mana management to the Player class, giving each player their own mana pool.&#10;&#10;- Game class: Changed the Game class to hold a list of Player objects, allowing for multiple players in a game. Added methods to add and remove players from the game. Updated the newGame and drawCard methods to work with multiple players.&#10;&#10;- Main class: Refactored the main game loop to interact with the Game class instead of directly with the Player class for game-related actions. This makes the code easier to understand and maintain.&#10;&#10;- Deck class: No major changes, but it's now being used in the Player class to give each player their own deck.&#10;&#10;These changes improve the object-oriented design of the code by ensuring that each class has a single responsibility and that the state and behavior related to a single concept (e.g., a player or a game) are encapsulated in one place.&quot;" />
    <MESSAGE value="Implemented Attackable interface and refactored attackWithCard method for future expansion.&#10;&#10;- Introduced a new interface Attackable with a takeDamage(int damage) method.&#10;&#10;- Modified Player and Card classes to implement the Attackable interface.&#10;Refactored the attackWithCard method in the Game class to accept an Attackable target.&#10;&#10;- Updated the attackWithCard method to call the takeDamage method on the target.&#10;&#10;- This change allows for easy expansion in the future, as the target selected can be passed to the attackWithCard method." />
    <MESSAGE value="Implement major refactor for better game flow and error handling&#10;&#10;This commit includes a significant overhaul of the game's structure and logic to improve the game flow, enhance error handling, and increase code readability:&#10;&#10;- Introduced a new `GameLoop` class to manage the main game loop. This class handles the game's flow, including player turns and game state updates. The `start` method was modified to prevent `ConcurrentModificationException` by separating the iteration over the cards from the modification of the cards.&#10;&#10;- Created a `PlayerInitializer` class to handle player initialization. This class is responsible for setting up the players at the start of the game, including assigning starter cards and initializing players&#10;&#10;- Created the `InputHandler` class to handle user inputs more robustly. This class now provides clearer prompts to the user and handles invalid inputs more gracefully.&#10;&#10;- Refactored the `Main` class to reflect the changes made in `GameLoop` and ensure consistent behaviour across the application. The main method now initializes the game and starts the game loop.&#10;&#10;- Enhanced the `Player` class to use `ArrayList` more effectively. The `set` method was replaced with `add` for adding new players, and unnecessary size specification was removed when creating the `ArrayList`.&#10;&#10;- Created the `CardLibrary` class to make the starter cards static and unmodifiable, ensuring they cannot be accidentally altered during gameplay. This class now serves as a central repository for all available cards in the game.&#10;&#10;These changes collectively improve the game's structure and flow, making the code easier to read and maintain, and the game more enjoyable to play." />
    <MESSAGE value="Refactor GameLoop and InputHandler classes for better code readability and maintainability&#10;&#10;- More robust validation across GameLoop, InputHandler, Attackable implementations &amp; PlayerInitializer&#10;&#10;- More methods in InputHandler to decrease code duplication.&#10;&#10;- Implement ID system into Player&#10;&#10;- Refactor GameLoop.start(); Removed lots of unnecessary logic and modularised." />
    <MESSAGE value="Merge remote-tracking branch 'origin/phase-one' into phase-one&#10;&#10;# Conflicts:&#10;#&#9;src/main/java/cis2039/pocketbeasts/gameengine/GameLoop.java&#10;#&#9;target/classes/cis2039/pocketbeasts/gameengine/GameLoop.class" />
    <MESSAGE value="Implemented multi-player support and refactor GameLoop&#10;&#10;- Added fatigue Damage mechanic if deck is empty.&#10;&#10;- More than 2 player support added.&#10;&#10;- Various checks inside GameLoop.start() for dead players and win conditions.&#10;&#10;- Refactor GameLoop.start to stick to OOP and reduce complexity." />
    <MESSAGE value="Refactor GameManager class, improve error handling, remove code duplication, and add some basic JUnitTests&#10;&#10;- Created ConsoleOutputManager - responsible for printing to the console specific messages." />
    <MESSAGE value="Refactor GameManager to adhere to OOP via abstraction of OutputManager &amp; InputManager&#10;&#10;- Created Interefaces, OutputManager &amp; InputManager&#10;&#10;- Added an overloaded constructor to the GameManager class that defaults to text-based input and output." />
    <MESSAGE value="Add comprehensive test cases for all classes &amp; minor functionality tweaks to gameplay.&#10;&#10;This commit introduces a suite of test cases that cover all classes in the project. The tests aim to ensure the correct functionality of each class and method, and to prevent regressions in future updates." />
    <MESSAGE value="Target" />
    <MESSAGE value="Implement Decorator Pattern for Card Enhancements&#10;&#10;This commit introduces the decorator pattern to enhance the functionality of the Card objects in the game. The changes include:&#10;&#10;- Created `ICard` interface: This interface defines the methods that all Card objects should implement.&#10;&#10;- Implemented `CardDecorator` abstract class: This class implements the `ICard` interface and serves as a base for all card decorators. It contains a reference to a decorated `ICard` object and delegates all `ICard` methods to this object.&#10;&#10;- Implemented `AttackCardDecorator` class: This class extends `CardDecorator` and overrides the `getAttack()` method to add additional attack power to the decorated card.&#10;&#10;- Implemented `DefenseCardDecorator` class: This class extends `CardDecorator` and overrides the `getHealth()` method to add additional health to the decorated card.&#10;&#10;- Updated `GameManager` class: Modified the `cardAttacks` and `cardPlays` methods to wrap `Card` objects with `AttackCardDecorator` and `DefenseCardDecorator` respectively before they are used.&#10;&#10;These changes allow us to add new behavior to `Card` objects without modifying their existing code, adhering to the open-closed principle of software design." />
    <MESSAGE value="Started implementation of Decorator Pattern for Card Enhancements&#10;&#10;This commit introduces the decorator pattern to enhance the functionality of the Card objects in the game. The changes include:&#10;&#10;- Created `ICard` interface: This interface defines the methods that all Card objects should implement.&#10;&#10;- Implemented `CardDecorator` abstract class: This class implements the `ICard` interface and serves as a base for all card decorators. It contains a reference to a decorated `ICard` object and delegates all `ICard` methods to this object.&#10;&#10;- Implemented `AttackCardDecorator` class: This class extends `CardDecorator` and overrides the `getAttack()` method to add additional attack power to the decorated card.&#10;&#10;- Implemented `DefenseCardDecorator` class: This class extends `CardDecorator` and overrides the `getHealth()` method to add additional health to the decorated card.&#10;&#10;These changes will allow us to add new behavior to `Card` objects without modifying their existing code, adhering to the open-closed principle of software design." />
    <MESSAGE value="Continued implementation of decorator pattern.&#10;&#10;- Refactored code to take ICard instead of Card" />
    <MESSAGE value="Finished implementation of Decorator design pattern&#10;&#10;- Unit tests for application of decorators&#10;&#10;- Function for applying future decorations&#10;&#10;- Added GlobalAttackBuffCardDecorator &amp; GlobalHealthBuffCardDecorator. Implemented their functionality." />
    <MESSAGE value="Apply Factory Design Pattern to Player, Card and Deck Creation&#10;&#10;Body:&#10;This commit applies the Factory Design Pattern to the creation of Player, Card and Deck objects in the game. &#10;&#10;- Created PlayerFactory, CardFactory and DeckFactory classes to encapsulate the creation logic of Player, Card and Deck objects respectively.&#10;&#10;- Refactored PlayerManager class to use PlayerFactory for player creation.&#10;&#10;- Refactored Player class to use DeckFactory for deck creation.&#10;&#10;- Refactored CardLibrary class to use CardFactory for card creation&#10;&#10;These changes make the code more flexible and easier to maintain, as adding new types of players, cards or decks in the future will only require modifications in the respective factory classes.&#10;&#10;If the game were to support different types of game modes or levels, a Factory could be used to create these as well." />
    <MESSAGE value="Implement Observer Pattern for Game Event Notifications&#10;&#10;&#10;This commit introduces the Observer design pattern to handle game event notifications in the PocketBeasts game. The changes include:&#10;&#10;- Creation of a `GameEventNotifier` class that acts as the subject in the Observer pattern. This class maintains a list of observers and provides methods to register, remove, and notify observers.&#10;&#10;- Modification of the `Game` class to implement the `Subject` interface. The `Game` class uses an instance of `GameEventNotifier` to manage its observers and notify them of game events.&#10;&#10;- Addition of observer registration and removal in the `GameManager` class. The `OutputManager` is registered as an observer when the game starts and is removed when the game stops.&#10;&#10;- Update of the `ConsoleOutputManager` class to implement the `Observer` interface. This class now responds to game events by updating the console output accordingly.&#10;&#10;These changes improve the modularity and flexibility of the game engine, making it easier to add, remove, or modify game events and their corresponding responses in the future." />
    <MESSAGE value="Fix various tests" />
    <option name="LAST_COMMIT_MESSAGE" value="Fix various tests" />
  </component>
</project>